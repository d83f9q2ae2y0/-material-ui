import { useState } from 'react';
import axios from 'axios';
import {
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Box,
  Alert,
  CircularProgress
} from '@mui/material';

const DialogManager = () => {
  const [openDialog, setOpenDialog] = useState(false);
  const [activeDialog, setActiveDialog] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [formData, setFormData] = useState({ name: '', email: '' });

  const handleButtonClick = (dialogType) => {
    setActiveDialog(dialogType);
    setOpenDialog(true);
    setError('');
    setFormData({ name: '', email: '' });
  };

  const handleClose = () => {
    setOpenDialog(false);
    setActiveDialog(null);
    setError('');
    setFormData({ name: '', email: '' });
  };

  const handleFormChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleFormSubmit = async () => {
    setLoading(true);
    setError('');
    try {
      await axios.post('/api/form-submit', formData);
      handleClose();
    } catch (err) {
      setError(err.response?.data?.message || 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  const handleConfirmation1 = async () => {
    setLoading(true);
    setError('');
    try {
      await axios.post('/api/action-1');
      handleClose();
    } catch (err) {
      setError(err.response?.data?.message || 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  const handleConfirmation2 = async () => {
    setLoading(true);
    setError('');
    try {
      await axios.post('/api/action-2');
      handleClose();
    } catch (err) {
      setError(err.response?.data?.message || 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box sx={{ display: 'flex', gap: 2, p: 4 }}>
      <Button variant="contained" onClick={() => handleButtonClick('form')}>
        Button 1
      </Button>
      <Button variant="contained" onClick={() => handleButtonClick('confirm1')}>
        Button 2
      </Button>
      <Button variant="contained" onClick={() => handleButtonClick('confirm2')}>
        Button 3
      </Button>

      <Dialog open={openDialog} onClose={handleClose} maxWidth="sm" fullWidth>
        {activeDialog === 'form' && (
          <>
            <DialogTitle>Form Submission</DialogTitle>
            <DialogContent>
              {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, pt: 2 }}>
                <TextField
                  label="Name"
                  name="name"
                  value={formData.name}
                  onChange={handleFormChange}
                  fullWidth
                  disabled={loading}
                />
                <TextField
                  label="Email"
                  name="email"
                  type="email"
                  value={formData.email}
                  onChange={handleFormChange}
                  fullWidth
                  disabled={loading}
                />
              </Box>
            </DialogContent>
            <DialogActions>
              <Button onClick={handleClose} disabled={loading}>Cancel</Button>
              <Button
                onClick={handleFormSubmit}
                variant="contained"
                disabled={loading}
              >
                {loading ? <CircularProgress size={24} /> : 'Submit'}
              </Button>
            </DialogActions>
          </>
        )}

        {activeDialog === 'confirm1' && (
          <>
            <DialogTitle>Confirmation</DialogTitle>
            <DialogContent>
              {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
              <Box sx={{ pt: 2 }}>
                Are you sure you want to proceed with this action?
              </Box>
            </DialogContent>
            <DialogActions>
              <Button onClick={handleClose} disabled={loading}>Cancel</Button>
              <Button
                onClick={handleConfirmation1}
                variant="contained"
                disabled={loading}
              >
                {loading ? <CircularProgress size={24} /> : 'Proceed'}
              </Button>
            </DialogActions>
          </>
        )}

        {activeDialog === 'confirm2' && (
          <>
            <DialogTitle>Another Confirmation</DialogTitle>
            <DialogContent>
              {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
              <Box sx={{ pt: 2 }}>
                Are you sure you want to proceed with this different action?
              </Box>
            </DialogContent>
            <DialogActions>
              <Button onClick={handleClose} disabled={loading}>Cancel</Button>
              <Button
                onClick={handleConfirmation2}
                variant="contained"
                disabled={loading}
              >
                {loading ? <CircularProgress size={24} /> : 'Proceed'}
              </Button>
            </DialogActions>
          </>
        )}
      </Dialog>
    </Box>
  );
};

export default DialogManager;


CREATE VIEW author_book_stats AS
SELECT 
    a.id,
    a.name,
    COUNT(b.id) as books_count,
    CASE 
        WHEN a.test IS NOT NULL THEN
            SUBSTRING(
                (SELECT ', ' + b2.name
                 FROM book b2
                 WHERE b2.author_id = a.id
                 ORDER BY b2.name
                 FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'),
                3,
                LEN((SELECT ', ' + b2.name
                     FROM book b2
                     WHERE b2.author_id = a.id
                     FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'))
            ) + ', ' + a.test
        ELSE
            SUBSTRING(
                (SELECT ', ' + b2.name
                 FROM book b2
                 WHERE b2.author_id = a.id
                 ORDER BY b2.name
                 FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'),
                3,
                LEN((SELECT ', ' + b2.name
                     FROM book b2
                     WHERE b2.author_id = a.id
                     FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'))
            )
    END as book_names
FROM author a
LEFT JOIN book b ON a.id = b.author_id
GROUP BY a.id, a.name, a.test;
