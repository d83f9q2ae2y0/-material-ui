import { useState, useCallback, useEffect } from 'react';

// Custom hook for data fetching (using fetch, but pattern works with axios)
const useDataFetch = (url) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchData = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch(url);
      const json = await response.json();
      setData(json);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }, [url]);

  const refetch = useCallback(async () => {
    return fetchData();
  }, [fetchData]);

  // Fetch on mount
  useEffect(() => {
    fetchData();
  }, [fetchData]);

  return { data, loading, error, refetch };
};

// Child component
const ChildComponent = ({ onSuccess }) => {
  const [isLoading, setIsLoading] = useState(false);

  const handleAction = async () => {
    setIsLoading(true);
    try {
      // Your API call here (using axios in real project)
      const response = await fetch('https://jsonplaceholder.typicode.com/posts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: 'New Post',
          body: 'This is a test post',
          userId: 1,
        }),
      });
      
      if (!response.ok) throw new Error('Action failed');
      
      // Call onSuccess callback after action succeeds
      await onSuccess();
    } catch (error) {
      console.error('Action failed:', error);
      setIsLoading(false);
    }
  };

  return (
    <button 
      onClick={handleAction}
      disabled={isLoading}
      style={{
        padding: '10px 20px',
        fontSize: '16px',
        cursor: isLoading ? 'not-allowed' : 'pointer',
        opacity: isLoading ? 0.6 : 1,
        backgroundColor: isLoading ? '#ccc' : '#007bff',
        color: 'white',
        border: 'none',
        borderRadius: '4px',
      }}
    >
      {isLoading ? 'Loading...' : 'Perform Action'}
    </button>
  );
};

// Parent component
const ParentComponent = () => {
  const { data, loading, refetch } = useDataFetch(
    'https://jsonplaceholder.typicode.com/posts/1'
  );

  const handleChildSuccess = async () => {
    // Call refetch and wait for it to complete
    // Button loading state will be removed when this resolves
    await refetch();
  };

  return (
    <div style={{ padding: '20px', fontFamily: 'Arial', maxWidth: '600px' }}>
      <h1>Parent Component</h1>
      
      <div style={{ marginBottom: '20px' }}>
        <h3>Data:</h3>
        {loading && <p>Loading data...</p>}
        {data && (
          <div style={{ 
            backgroundColor: '#f0f0f0', 
            padding: '10px', 
            borderRadius: '4px' 
          }}>
            <p><strong>Title:</strong> {data.title}</p>
            <p><strong>Body:</strong> {data.body}</p>
          </div>
        )}
      </div>

      <div style={{ borderTop: '1px solid #ccc', paddingTop: '20px' }}>
        <h3>Child Component:</h3>
        <ChildComponent onSuccess={handleChildSuccess} />
      </div>
    </div>
  );
};

export default ParentComponent;


public function searchByNameOrBookTitle(string $search, array $authorFields = ['name', 'email'], array $bookFields = ['title']): array
{
    $qb = $this->createQueryBuilder('a')
        ->leftJoin('a.books', 'b');

    $conditions = [];
    
    foreach ($authorFields as $field) {
        $conditions[] = $qb->expr()->like("a.{$field}", ':search');
    }
    
    foreach ($bookFields as $field) {
        $conditions[] = $qb->expr()->like("b.{$field}", ':search');
    }

    return $qb->where($qb->expr()->orX(...$conditions))
        ->setParameter('search', '%' . $search . '%')
        ->distinct()
        ->getQuery()
        ->getResult();
}


public function searchByNameOrBookTitle(string $search): array
{
    $qb = $this->createQueryBuilder('a')
        ->leftJoin('a.books', 'b')
        ->where('a.name LIKE :search')
        ->orWhere('a.email LIKE :search')
        ->orWhere('b.title LIKE :search')
        ->setParameter('search', '%' . $search . '%')
        ->distinct()
        ->getQuery()
        ->getResult();

    return $qb;
}
